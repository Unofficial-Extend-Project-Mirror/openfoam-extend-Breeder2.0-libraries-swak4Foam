#! /bin/bash

BISONPATH=`which bison`
NOBISON=$?

if [[ $NOBISON != 0 ]]; then
    echo
    echo "No 'bison' found. This is absolutely essential for swak4Foam. Can't go on"
    echo "Every Linux has a binary package that installs bison (http://www.gnu.org/software/bison/). Install it. Then go on"
    echo "As an alternative you can install a local copy of bison by running ./maintainanceScripts/compileRequirements.sh from the installation directory"
    echo "BTW: it was listed as a requirement in the README. You read that, didn't you?"
    echo
    exit 42
fi

FLEXPATH=`which flex`
NOFLEX=$?

if [[ $NOFLEX != 0 ]]; then
    echo
    echo "No 'flex' found. This is absolutely essential for swak4Foam. Can't go on"
    echo "Every Linux has a binary package that installs flex (http://flex.sourceforge.net). Install it. Then go on"
    echo "BTW: it was listed as a requirement in the README. You read that, didn't you?"
    echo
    exit 42
fi

BISONVER=`bison -V | head -n 1| tr ' ' '\n' | tail -n 1`

echo "Bison is version $BISONVER"

if [[ $BISONVER < 2.4 ]]; then
    echo "swak4Foam only confirmed to work with Bison >= 2.4"
    echo "Compiles with 2.3 but has offset-problems with locations which break the Plugin-functionality"
    echo "Consider running ./maintainanceScripts/compileRequirements.sh for a local bison-installation"
    if [ -z $USE_OLD_BISON ]; then
	echo "Set the environment variable USE_OLD_BISON if you want to continue anyway"
	exit 42
    else
	echo "I continue under protest. Should swak4Foam work with your bison-version, then please report it"
	echo
	echo
    fi
fi

if [[ $BISONVER > 2.999 ]]; then
    echo "swak4Foam only confirmed to work with Bison 2.x"
    echo "Consider running ./maintainanceScripts/compileRequirements.sh for a local bison-installation"
    if [ -z $DEVELOPE_FOR_NEW_BISON ]; then
	echo "Set the environment variable DEVELOPE_FOR_NEW_BISON if you want to continue anyway."
	exit 42
    fi
fi

FLEXVER=`flex -V | head -n 1| tr ' ' '\n' | tail -n 1`
MINORVER=`echo $FLEXVER | tr '.' '\n' | tail -n 1`

echo "Flex is version $FLEXVER (Minor version: $MINORVER)"

if [[ $FLEXVER < 2.6 && $MINORVER -lt 35 ]]; then
    echo "swak4Foam only confirmed to work with Flex >= 2.5.35 (2.5.33 may work, but 2.5.4 definitely not)"
    if [ -z $USE_OLD_FLEX ]; then
	echo "Set the environment variable USE_OLD_FLEX if you want to continue anyway"
	exit 42
    else
	echo "I continue under protest. Should swak4Foam work with your flex-version, then please report it"
	echo
	echo
    fi
fi

of_version_major=`echo $WM_PROJECT_VERSION | sed -e 's=\([0-9]*\).*=\1='`
of_version_minor=`echo $WM_PROJECT_VERSION | sed -e 's=[0-9]*\.\([0-9]*\).*=\1='`
of_version_patch=`echo $WM_PROJECT_VERSION | sed -e 's=[0-9]*\.[0-9]*\.\([0-9a-z]*\).*=\1=' -e 's=[0-9]*\.[0-9]*=x=' -e 's=x=-1='`

if [[ $of_version_patch == -1  ]]; then
    # Needs to be 98 so that it is smaller than version macro with 99
    of_version_patch_num=98
else
    of_version_patch_num=$of_version_patch
fi

echo "OpenFOAM-version: Major $of_version_major Minor $of_version_minor Patch $of_version_patch (-1 == x / $of_version_patch_num)"

versionFile=swak4FoamParsers/foamVersion4swak.H

cat >$versionFile.tmp <<EOF
// generated by the Allwmake-script of the swak4Foam-distro
#ifndef foamVersion4swak_H
#define foamVersion4swak_H

#define FOAM_VERSION4SWAK_MAJOR $of_version_major
#define FOAM_VERSION4SWAK_MINOR $of_version_minor
#define FOAM_VERSION4SWAK_PATCH $of_version_patch
#define FOAM_VERSION4SWAK_PATCH_NUM $of_version_patch_num

#endif
EOF

if [ -e $versionFile ]; then
    nrDiff=`diff $versionFile.tmp $versionFile | wc -l | tr -d " "`
    if [[ $nrDiff > 0 ]]; then
	echo "$versionFile changed"
	mv $versionFile.tmp $versionFile
    else
	# Make sure that not a complete recompilation is triggered
	echo "No change to $versionFile"
	rm $versionFile.tmp
    fi
else
    echo "No $versionFile. Generated"
    mv $versionFile.tmp $versionFile
fi

wmakeLnInclude simpleFunctionObjects

wmake libso swak4FoamParsers

PARSERSOK=$?

if [[ $PARSERSOK != 0 ]]; then
    echo "Parser library did not compile OK. No sense continuing as everything else depends on it"
    exit 42
fi

wmake libso swakLagrangianParser

wmake libso groovyBC

wmake libso swakFunctionObjects

wmake libso simpleFunctionObjects

wmake libso simpleLagrangianFunctionObjects

wmake libso simpleSearchableSurfaces

wmake libso simpleSwakFunctionObjects

wmake libso swakTopoSources

if [ $of_version_major -ge 2 -a $of_version_minor -eq 0 ]; then
  wmake libso swakSourceFields Make.20
else
  wmake libso swakSourceFields
fi

if [[ $WM_PROJECT_VERSION > 2.2 && "$FOAM_DEV" == "" ]]
then
    echo "Compiling swakFvOptions"
    wmake libso swakFvOptions
fi

if [ "$FOAM_DEV" != "" ]
then
    for my in mybison myflex
    do
	mysource="../../swak4FoamParsers/Make/$my"
	mytarget="swakFiniteArea/Make/$my"
	if [ ! -e $mytarget ]
	then
	    echo "Creating symbolic link from $mysource to $mytarget"
	    ln -s $mysource $mytarget
	fi
    done

    wmake libso swakFiniteArea
fi

wmake libso groovyStandardBCs

if [ "$SWAK_PYTHON_INCLUDE" != "" ]
then
    SOEXT=so

    if [ `uname -s`=="Darwin" ]; then
	SOEXT=dylib
    fi

    oldPython="$FOAM_USER_LIBBIN/libpythonIntegration.$SOEXT"
    if [ -e $oldPython ]
    then
	echo "Removing old python integration $oldPython"
	rm $oldPython
    fi
    wmake libso swakPythonIntegration
else
    echo
    echo "SWAK_PYTHON_INCLUDE not defined .... no Python-Integration. Most people are fine without it"
    echo
fi

(cd functionPlugins; wmake all)

if [ "$SWAK_USER_PLUGINS" != "" ]
then
    plugins=$(echo $SWAK_USER_PLUGINS | tr ";" "\n")

    for plug in $plugins
    do
	echo "Compiling user function-plugin $plug"
	wmake libso $plugins
    done
else
    echo
    echo "If you have your own function-plugins you can specify them using the SWAK_USER_PLUGINS environment variable and they would be compiled now. If you don't know what this means: don't bother. You propably don't need it"
    echo
fi
