/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          0.005;

writeControl    adjustableRunTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

functions { 
    pythonSimple
    {
        type pythonIntegration;

        //        debugPythonWrapper 1; // switching on

        startCode "print 'Starting';a=0; print dir()";
        executeCode "a+=1; print 'a:',a";
        endCode "print 'Never been here'";
        //        tolerateExceptions true;
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;
    }
    pythonOutput
    {
        type pythonIntegration;

        startCode "";
        executeCode "print 'timeName :',timeName,'outputTime:',outputTime";
        endCode "print 'timeName :',timeName,'outputTime:',outputTime";
        //        tolerateExceptions true;
        parallelMasterOnly true;
        useNumpy false;
        useIPython true;
    }
    pythonPaths
    {
        type pythonIntegration;
        startFile "$FOAM_CASE/printPaths.py";
        executeCode "from os import environ;print 'FOAM_CASE=',environ['FOAM_CASE'];print 'Time data:',timeDir";
        endCode "print 'Never been here'";
//        tolerateExceptions true;
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;
    }
    pythonPyFoam
    {
        type pythonIntegration;
        startCode "from os import path;from PyFoam.RunDictionary.ParsedParameterFile import ParsedParameterFile";
        // executeCode "print 'Time till end:',float(ParsedParameterFile(path.join(caseDir,'system','controlDict'))['endTime'])-runTime";
        executeFile "$FOAM_CASE/executePyFoam.py";
        endCode "print 'Never been here'";
        //        tolerateExceptions true;
        parallelMasterOnly true;
        useNumpy false;
        useIPython true;
    }
    pythonPythonFlu
    {
        type pythonIntegration;
        startCode "import Foam.OpenFOAM as OF";
        endCode "print ";
        executeCode "print 'Nr of Procs:',OF.Pstream.nProcs()";
        tolerateExceptions true;
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;
    }
    onlyWithFlu {
        type executeIfPython;
        readDuringConstruction false;
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;

        conditionFile "$FOAM_CASE/checkPythonFlu.py";

        functions {
            pythonPythonFluFull
            {
                type pythonFluIntegration;
                startCode "print type(time)";
                endCode "print ";
                executeCode "print 'Nr of Procs:',OpenFOAM.Pstream.nProcs();print type(time);print dir();print time.timePath()";
                //        tolerateExceptions true;
                parallelMasterOnly false;
                isParallelized true;
                useNumpy false;
            }
        }
    }
    onlyWithMpi4Py {
        type executeIfPython;
        readDuringConstruction false;
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;

        conditionFile "$FOAM_CASE/checkMpi4Py.py";

        functions {
            GatherDataWithPython
            {
                type pythonIntegration;
                startFile "$FOAM_CASE/startMpi4Py.py";
                executeFile "$FOAM_CASE/executeMpi4Py.py";
                endFile $executeFile;
                //        tolerateExceptions true;
                parallelMasterOnly false;
                isParallelized true;
                useNumpy false;
            }
        }
    }
    addScalar
    {
        type addGlobalVariable;
        outputControl timeStep;
        outputInterval 1;
        globalScope pythonVars;
        globalName aScalar;
        valueType scalar;
        value 42;
    }
    addVector
    {
        type addGlobalVariable;
        outputControl timeStep;
        outputInterval 1;
        globalScope pythonVars;
        globalName aVector;
        valueType vector;
        value (1 2 3);
    }
    pythonGetGlobals
    {
        type pythonIntegration;
        swakToPythonNamespaces ( pythonVars );
        startCode "print 'Start:',aVector,aScalar;newTime=0;newVector=range(3)";
        executeCode "print 'Running:',map(lambda x:x*(runTime+aScalar),aVector);newTime=aScalar*runTime;newVector=(runTime,-runTime,1)";
        endCode "print 'Never been here'";
        //        tolerateExceptions true;
        pythonToSwakNamespace testPython;
        pythonToSwakVariables (  newTime newVector );
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;
    }
    pythonGetGlobalsScatter
    {
        $pythonGetGlobals;
        parallelMasterOnly true;
        pythonToSwakNamespace testPythonScatter;
    }
    pythonGetGlobalsScatterNumpy
    {
        $pythonGetGlobals;
        parallelMasterOnly true;
        pythonToSwakNamespace testPythonScatterNumpy;
        useNumpy true;
    }
    pythonGetPyFoamGlobals
    {
        type pythonIntegration;
        swakToPythonNamespaces ( testPython );
        startCode "print 'Start PyFoam:',newVector;from PyFoam.Basics.FoamFileGenerator import Vector;foamVector=Vector(0,0,0)";
        executeCode "foamVector=Vector(newVector[0],newVector[1],newVector[2]);print foamVector";
        endCode "print 'Never been here'";
        //        tolerateExceptions true;
        pythonToSwakNamespace testPyFoam;
        pythonToSwakVariables ( foamVector );
        parallelMasterOnly false;
        isParallelized true;
        useNumpy false;
        useIPython true;
    }
    startupFacePositions {
        $addVector;
        name facePos;
        value (0 0 0);
    }
    calcNonUniformValues {
        type calculateGlobalVariables;
        outputControl timeStep;
        outputInterval 1;
        valueType patch;
        patchName fixedWalls;
        toGlobalNamespace testPythonFields;
        toGlobalVariables (
            facePos
            faceArea
        );
        variables (
            "facePos=pos();"
            "faceArea=area();"
        );
        noReset true;
    }
    pythonGetNonUniformGetGlobals
    {
        type pythonIntegration;
        isParallelized true;
        parallelMasterOnly false;
        useNumpy true;
        useIPython true;
        swakToPythonNamespaces (
            testPython
            testPythonFields
        );
        startCode "print facePos;total=numpy.zeros(facePos.shape)";
        executeCode "total=total+facePos;print 'Ratio:',total.max()/facePos.max();faceArea[::2]=-faceArea[::2];print faceArea.shape";
        endCode "";
        //        interactiveAfterExecute true;
        pythonToSwakNamespace variablesFromNumpy;
        pythonToSwakVariables (
            total
        );
    }
    pythonGetNonUniformSetGlobals
    {
        type pythonIntegration;
        isParallelized true;
        useNumpy true;
        useIPython true;
        parallelMasterOnly false;
        swakToPythonNamespaces (
            testPython
            testPythonFields
        );
        executeCode "randomVector=apply(numpy.random.randn,facePos.shape);randomField=numpy.random.randn(facePos.shape[0]);normalVector=(1,2,3);normalScalar=42;print 'Mean facepos.x',facePos.x.mean();numpy.savetxt(dataFile('randomField'),randomField)";
        startCode $executeCode;
        endCode "";
        writeCode "print 'Write';numpy.save(timeDataFile('randomVector'),randomVector)";

        pythonToSwakNamespace variablesFromNumpy;
        pythonToSwakVariables (
            randomField
            randomVector
            normalVector
            normalScalar
        );
        //        interactiveAfterExecute true;
    }
    pythonDeltaT {
        type setDeltaTWithPython;
        parallelMasterOnly true;
        deltaTCode "import math;return 0.005*(1+0.5*math.sin(20*runTime))";
    }
    pythonEndTime {
        type setEndTimeWithPython;
        parallelMasterOnly false;
        isParallelized true;
        endTimeCode "import math;return 0.5+0.25*math.sqrt(runTime)";
    }
    pythonDynamic {
        type dynamicFunctionObjectListProxy;
        readDuringConstruction true;
        dictionaryProvider stdoutFromPythonScriptProvider;
        parallelMasterOnly true;
        scriptFile "$FOAM_CASE/printFO.py";
    }
    pythonDynamic2 {
        $pythonDynamic;
        parallelMasterOnly false;
        isParallelized true;
    }
}

libs (
    "libgroovyBC.so"
    "libswakPythonIntegration.so"
    "libswakPythonIntegrationCluster.so"
    "libswakFunctionObjects.so"
);

// ************************************************************************* //
