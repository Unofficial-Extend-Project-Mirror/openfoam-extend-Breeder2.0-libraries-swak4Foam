/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          0.005;

writeControl    timeStep;

writeInterval   20;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

libs (
    "libsimpleFunctionObjects.so"
    "libsimpleLagrangianFunctionObjects.so"
    "libswakLagrangianCloudSourcesFunctionPlugin.so"
    "libswakFunctionObjects.so"
    "libswakThermoTurbFunctionPlugin.so"
);

functions {
    loadThermoForParcels {
        type loadPsiThermoModel;
        correctModel false;
        //        correctModel true;
        allowReload false;
    }
    getSLGThermoForParcels {
        type loadSLGThermoModel;
        correctModel false;
        allowReload false;
        thermoName thermophysicalProperties;
    }
    // loadThermoForParcels2 {
    //     type loadPsiThermoModel;
    //     correctModel false;
    //     allowReload false;
    //     failIfModelTypeExists false;
    // }
    // loadTurbulenceForParcels {
    //     //        type loadCompressibleTurbulenceModel;
    //     type loadIncompressibleTurbulenceModel;
    //     correctModel false;
    //     allowReload false;

    //     rhoName rhoPseudo;
    //     UName U;
    //     phiName phi;
    //     thermoName thermophysicalProperties;
    //     transportModel transportProperties;
    // }
    rhoFieldForSolid {
        type expressionField;
        autowrite false;
        outputControl timeStep;
        outputInterval 1;
        expression "thermo_rho()";
        fieldName rho;
    }
    nuFieldForSolid {
        $rhoFieldForSolid;
        fieldName nu;
        expression "thermo_mu()/rho";
    }
    solidParticle {
        type evolveSolidParticleCloud;
        cloudName injectSolidParticle;
        g "down" [0 1 -2 0 0 0 0] (0 -9.81 0);
    }
    kinematicParticle {
        type evolveKinematicCloud;
        cloudName injectFromTop;
        g "down" [0 1 -2 0 0 0 0] (0 -9.81 0);
        rhoName rhoPseudo;
        UName U;
        muName mu;
    }
    momentumSourceKinematic {
        type expressionField;
        autowrite true;
        expression "lcsMomentumSource(injectFromTop)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromTopMomentumSource;
    }
    massFractionKinematic {
        type expressionField;
        autowrite true;
        expression "lcsMassFraction(injectFromTop)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromTopMassFraction;
    }
    volumeFractionKinematic {
        type expressionField;
        autowrite true;
        expression "lcsVolumeFraction(injectFromTop)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromTopVolumeFraction;
    }
    rhoEffKinematic {
        type expressionField;
        autowrite true;
        expression "lcsRhoEff(injectFromTop)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromTopRhoEff;
    }
    reactingParticle {
        type evolveReactingCloud;
        cloudName injectFromLeft;
        g "down" [0 1 -2 0 0 0 0] (0 -9.81 0);
        rhoName rhoPseudo;
        UName U;
        SLGThermoPhysicsName SLGThermo;
    }
    massSourceAccmulated {
        type expressionField;
        autowrite true;
        variables (
            "sourceSum=sourceSum+deltaT()*lcsMassSource(injectFromLeft);"
        );
        storedVariables (
            {
                name sourceSum;
                initialValue "0";
            }
        );
        expression "sourceSum";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromLeftMassSourceSum;
    }
    massSource {
        type expressionField;
        autowrite true;
        expression "lcsMassSource(injectFromLeft)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromLeftMassSource;
    }
    enthalpySource {
        type expressionField;
        autowrite true;
        expression "lcsEnthalpySource(injectFromLeft)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromLeftEnthalpySource;
    }
    H2OSource {
        type expressionField;
        autowrite true;
        expression "lcsSpeciesSource(injectFromLeft,H2O)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromLeftH2OSource;
    }
    momentumSourceReacting {
        type expressionField;
        autowrite true;
        expression "lcsMomentumSource(injectFromLeft)";
        outputControl timeStep;
        outputInterval 1;
        fieldName injectFromLeftMomentumSource;
    }
}

// ************************************************************************* //
