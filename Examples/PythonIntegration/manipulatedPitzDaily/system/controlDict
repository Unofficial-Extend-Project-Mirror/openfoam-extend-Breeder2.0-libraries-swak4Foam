/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          1;

writeControl    timeStep;

writeInterval   50;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

libs (
    "libpythonIntegration.so"
);

functions (
    adaptRelaxation
    {
        type pythonIntegration;
        startCode
            #{
from os import path
from PyFoam.RunDictionary.ParsedParameterFile import ParsedParameterFile
from math import log,exp,pow
control=ParsedParameterFile(path.join(caseDir,"system","controlDict"))

end=float(control["endTime"])

del control

scaleTill=int(end*0.5)
scaleFactor=10.

factor=exp(log(scaleFactor)/scaleTill)

print "Scale by actor:",factor
print

fvSol=ParsedParameterFile(path.join(caseDir,"system","fvSolution"),backup=True)
             #};
        executeCode
            #{
if runTime<=scaleTill:
    print "Scaling relaxation up for",
    for v in fvSol["relaxationFactors"]:
        print v,
        fvSol["relaxationFactors"][v]*=factor
    print "Maybe this will not be read by the solver at every time-step"
    fvSol.writeFile()

print
            #};
        endCode
            #{
print "Restoring fvSolution to its old glory"
fvSol.restore()

print
            #};
        parallelMasterOnly true;  // In parallel runs only the master needs to execute this
    }
);

// ************************************************************************* //
