/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     twoPhaseEulerFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         2;

deltaT          0.0005;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable on;

adjustTimeStep  no;

maxCo           0.9;

maxDeltaT       1e-05;

libs (
    "libswakPythonIntegration.so"
    "libgroovyBC.so"
    //    "libsimpleSwakFunctionObjects.so"
);

functions
{
    getGravity
    {
        type pythonIntegration;
        startFile "$FOAM_CASE/readGravity.py";
        executeCode "";
        endCode "";
        pythonToSwakNamespace whichWayDown;
        pythonToSwakVariables (g up);
        //        interactiveAfterExecute true;
        //        interactiveAfterException true;
        //        debugPythonWrapper 1;
    }
    // testUp {
    //     type swakExpression;
    //     valueType internalField;
    //     expression "up";
    //     verbose  true;
    //     accumulations ( average );
    // }
    fieldAverage1
    {
        type           fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        outputControl   outputTime;
        fields
        (
            Ua
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            Ub
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            alpha
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            p
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
        );
    }
}


// ************************************************************************* //
