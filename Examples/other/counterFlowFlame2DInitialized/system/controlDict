/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     reactingFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1.0;

deltaT          1e-6;

writeControl    adjustableRunTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.4;

libs (
    "libsimpleFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libswakThermoTurbFunctionPlugin.so"
);

functions {
    initStuff {
        type executeIfStartTime;
        readDuringConstruction true;
        runIfStartTime true;
        outputControlMode startup;
        functions {
            calcPotentialU {
                type initPotentialFlow;
                UName U;
                pName p;
                outputControlMode startup;
                writeOldFields true;
                writeFields true;
                overrideP true;
                initialiseUBCs true;
                onlyAtStartup true;
                runIfStartTime true;
            }
            resetPhi {
                type recalcPhi;
                outputControlMode startup;
                writeOldFields true;
                writeFields true;
                UName U;
                pName p;
                phiName phi;
                rhoName rho;
                onlyAtStartup true;
                runIfStartTime true;
            }
            moveCH4 {
                type solveTransportPDE;
                outputControl timeStep;
                outputInterval 1;
                solveAt startup;
                fieldName CH4;
                steady true;
                writeBeforeAfter true;
                useFieldFromMemory true;
                diffusion "rhoTurb_alphaEff()" [1 -1 -1 0 0 0 0];
                source "0" [1 -3 -1 0 0 0 0];
                phi "phi" [1 0 -1 0 0 0 0];
            }
            moveO2 {
                $moveCH4;
                fieldName O2;
            }
            resetN2 {
                type manipulateField;
                outputControl timeStep;
                outputInterval 1;
                fieldName N2;
                expression "min(1,max(0,1-O2-CH4))";
                mask "true";
            }
            calcT {
                type solveLaplacianPDE;
                outputControl timeStep;
                outputInterval 1;
                solveAt startup;
                fieldName T;
                steady true;
                writeBeforeAfter true;
                useFieldFromMemory true;
                lambda "rhoTurb_alphaEff()" [0 -1 -1 0 0 0 0];
                variables (
                    "factor=1e1;"
                    "TRef=300;"
                );
                // source "-factor*(T-TRef)" [0 -3 -1 1 0 0 0];
                // sourceImplicit "0" [0 -3 -1 0 0 0 0];
                source "factor*TRef" [0 -3 -1 1 0 0 0];
                sourceImplicit "-factor" [0 -3 -1 0 0 0 0];
            }
            oldOrNew {
                type executeIfOpenFOAMVersionBiggerEqual;
                readDuringConstruction true;
                runIfStartTime true;
                outputControlMode startup;

                majorVersion "2";
                minorVersion "2";
                //                patchVersion "x";

                functions {
                    recalcEnthalpy {
                        type recalcThermoHe;
                        outputControlMode startup;
                        runIfStartTime true;
                        onlyAtStartup true;
                    }
                }
                else {
                    functions {
                        recalcEnthalpy {
                            type recalcThermoHs;
                            outputControlMode startup;
                            runIfStartTime true;
                            onlyAtStartup true;
                        }
                    }
                }
            }
            correctThermo {
                type correctThermo;
                outputControlMode startup;
                onlyAtStartup true;
                runIfStartTime true;
                updateRho true;
                rhoName rho;
            }
            resetPhiAgain {
                // Change of rho will give a different phi
                $resetPhi;
            }
            writeRhoEtc {
                type writeAdditionalFields;
                fieldNames (
                    rho
                    psi
                    //                    hs
                );
                outputControlMode startup;
            }
        }
    }
}

// ************************************************************************* //
