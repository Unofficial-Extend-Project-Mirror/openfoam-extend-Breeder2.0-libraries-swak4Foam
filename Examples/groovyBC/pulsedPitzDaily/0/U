/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

frequency 500;

boundaryField
{
    inlet
    {
        //        type            groovyBC;
        type            groovyBCFixedValue;

        //        debugCommonDriver 1;

        //        variableNameIdenticalToField true;

        minMaxPoint (
            "minY=min(yp);"
            "maxY=max(yp);"
        );

      getPoints "pts().y";

      variables (
          "yp=$[(string)getPoints];"
          "#minMaxPoint;"
          "para=-(maxY-pos().y)*(pos().y-minY)/(0.25*pow(maxY-minY,2))*normal();"
      );

      amplitude a [0 1 -1 0 0 0 0] 10;

      valueExpression "$[(dimensionedScalar)amplitude]*(1+0.5*sin($[:frequency]*time()))*para";

      value           uniform (10 0 0);
    }

    outlet
    {
      type            groovyBC;

      defaultVelocity v [0 1 -1 0 0 0 0] (0 0 0);

      valueExpression "$[(dimensionedVector)defaultVelocity]";
      gradientExpression "vector(0,0,0)";
      fractionExpression "(phi > 0) ? 0 : 1";

//         type            inletOutlet;
//         inletValue      uniform (0 0 0);
      value           uniform (0 0 0);
    }

    upperWall
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    lowerWall
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
