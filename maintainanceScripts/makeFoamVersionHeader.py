#! /usr/bin/env python

# This is a bit warped because
# a. It has to support inconsistent version numbers
# b. Should give the same results as the old shell-implementation

import sys
from os import path,environ

# This part is lifted from six.py (https://pythonhosted.org/six/) to
# make sure that this script runs with Python 2 and Python 3

# True if we are running on Python 3.
PY3 = sys.version_info[0] == 3

if PY3:
    import builtins
    print_ = getattr(builtins, "print")
    del builtins
else:
    def print_(*args, **kwargs):
        """The new-style print function."""
        fp = kwargs.pop("file", sys.stdout)
        if fp is None:
            return
        def write(data):
            if not isinstance(data, basestring):
                data = str(data)
            fp.write(data)
        want_unicode = False
        sep = kwargs.pop("sep", None)
        if sep is not None:
            if isinstance(sep, unicode):
                want_unicode = True
            elif not isinstance(sep, str):
                raise TypeError("sep must be None or a string")
        end = kwargs.pop("end", None)
        if end is not None:
            if isinstance(end, unicode):
                want_unicode = True
            elif not isinstance(end, str):
                raise TypeError("end must be None or a string")
        if kwargs:
            raise TypeError("invalid keyword arguments to print()")
        if not want_unicode:
            for arg in args:
                if isinstance(arg, unicode):
                    want_unicode = True
                    break
        if want_unicode:
            newline = unicode("\n")
            space = unicode(" ")
        else:
            newline = "\n"
            space = " "
        if sep is None:
            sep = space
        if end is None:
            end = newline
        for i, arg in enumerate(args):
            if i:
                write(sep)
            write(arg)
        write(end)

verString=sys.argv[1]

foamFork="unknown"
if "FOAM_DEV" in environ:
    foamFork="extend"
elif (verString[0]=="v" and verString[-1]=="+") or verString=="plus":
    foamFork="openfoamplus"
    if verString[0]=="v" and verString[-1]=="+":
        verString=verString[1:-1]
else:
    foamFork="openfoam"

vParts=verString.split(".")

of_version_major=9
of_version_minor=9
of_version_patch="x"

try:
    of_version_major=int(vParts[0])
    of_version_minor=0

except ValueError:
    pass

if len(vParts)>1:
    try:
        of_version_minor=int(vParts[1])
    except ValueError:
        pass

if len(vParts)>2:
    try:
        of_version_patch=int(vParts[2])
    except ValueError:
        pass

if of_version_patch!="x":
    of_version_patch_num=of_version_patch
elif verString in ["dev","plus"]:
    of_version_patch=-1
    of_version_patch_num=99
elif len(vParts)==2:
    of_version_patch=0
    of_version_patch_num=0
else:
    of_version_patch=-1
    of_version_patch_num=98

templateString="""
// generated by the Allwmake-script of the swak4Foam-distro
#ifndef foamVersion4swak_H
#define foamVersion4swak_H

#define FOAM_VERSION4SWAK_MAJOR {of_version_major}
#define FOAM_VERSION4SWAK_MINOR {of_version_minor}
#define FOAM_VERSION4SWAK_PATCH {of_version_patch}
#define FOAM_VERSION4SWAK_PATCH_NUM {of_version_patch_num}

#define FOAM_VERSION4SWAK_FORK {foamFork}
"""

def addFork(fName):
    global templateString

    if foamFork==fName:
        templateString+="\n#define FOAM_VERSION4SWAK_IS_"+fName.upper()+" 1\n"
    else:
        templateString+="\n#undef FOAM_VERSION4SWAK_IS_"+fName.upper()+"\n"

addFork("openfoam")
addFork("openfoamplus")
addFork("extend")

templateString+="\n#endif\n"

print_(templateString.format(foamFork=foamFork,
                             of_version_major=of_version_major,
                             of_version_minor=of_version_minor,
                             of_version_patch=of_version_patch,
                             of_version_patch_num=of_version_patch_num))

print_("OpenFOAM-version: Major {of_version_major} Minor {of_version_minor} Patch {of_version_patch} (-1 == x / {of_version_patch_num}) Fork: {foamFork}".format(
    foamFork=foamFork,
    of_version_major=of_version_major,
    of_version_minor=of_version_minor,
    of_version_patch=of_version_patch,
    of_version_patch_num=of_version_patch_num),
      file=sys.stderr)
